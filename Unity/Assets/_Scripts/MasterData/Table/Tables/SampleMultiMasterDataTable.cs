// <auto-generated />
#pragma warning disable CS0105
using KC;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace KC.Tables
{
   public sealed partial class SampleMultiMasterDataTable : TableBase<SampleMultiMasterData>, ITableUniqueValidate
   {
        public Func<SampleMultiMasterData, long> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<SampleMultiMasterData, long> primaryIndexSelector;


        public SampleMultiMasterDataTable(SampleMultiMasterData[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Id;
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();


        public RangeView<SampleMultiMasterData> FindById(long key)
        {
            return FindManyCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<long>.Default, key);
        }

        public RangeView<SampleMultiMasterData> FindClosestById(long key, bool selectLower = true)
        {
            return FindManyClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<long>.Default, key, selectLower);
        }

        public RangeView<SampleMultiMasterData> FindRangeById(long min, long max, bool ascendant = true)
        {
            return FindManyRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<long>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR


#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(SampleMultiMasterData), typeof(SampleMultiMasterDataTable), "samplemulti",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("Id")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("SecondId")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("Name")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("Grade")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("CharacterType")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("Edition")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("MoveSpeed")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("SecondName")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("Numbers")),
                    new MasterMemory.Meta.MetaProperty(typeof(SampleMultiMasterData).GetProperty("Descriptions")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(SampleMultiMasterData).GetProperty("Id"),
                    }, true, false, System.Collections.Generic.Comparer<long>.Default),
                });
        }

#endif
    }
}