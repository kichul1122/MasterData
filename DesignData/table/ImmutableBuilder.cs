// <auto-generated />
#pragma warning disable CS0105
using KC;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using KC.Tables;

namespace KC
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<Sample2MasterData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new Sample2MasterDataTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.Sample3MasterDataTable,
                memory.SampleMasterDataTable,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void RemoveSample2MasterData(long[] keys)
        {
            var data = RemoveCore(memory.Sample2MasterDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new Sample2MasterDataTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.Sample3MasterDataTable,
                memory.SampleMasterDataTable,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void Diff(Sample2MasterData[] addOrReplaceData)
        {
            var data = DiffCore(memory.Sample2MasterDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new Sample2MasterDataTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.Sample3MasterDataTable,
                memory.SampleMasterDataTable,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Sample3MasterData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new Sample3MasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                table,
                memory.SampleMasterDataTable,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void RemoveSample3MasterData(long[] keys)
        {
            var data = RemoveCore(memory.Sample3MasterDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new Sample3MasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                table,
                memory.SampleMasterDataTable,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void Diff(Sample3MasterData[] addOrReplaceData)
        {
            var data = DiffCore(memory.Sample3MasterDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new Sample3MasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                table,
                memory.SampleMasterDataTable,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SampleMasterData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new SampleMasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                memory.Sample3MasterDataTable,
                table,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void RemoveSampleMasterData(long[] keys)
        {
            var data = RemoveCore(memory.SampleMasterDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new SampleMasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                memory.Sample3MasterDataTable,
                table,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void Diff(SampleMasterData[] addOrReplaceData)
        {
            var data = DiffCore(memory.SampleMasterDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new SampleMasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                memory.Sample3MasterDataTable,
                table,
                memory.SampleMultiMasterDataTable,
                memory.SampleProbMasterDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SampleMultiMasterData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new SampleMultiMasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                memory.Sample3MasterDataTable,
                memory.SampleMasterDataTable,
                table,
                memory.SampleProbMasterDataTable
            
            );
        }


        public void ReplaceAll(System.Collections.Generic.IList<SampleProbMasterData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new SampleProbMasterDataTable(newData);
            memory = new MemoryDatabase(
                memory.Sample2MasterDataTable,
                memory.Sample3MasterDataTable,
                memory.SampleMasterDataTable,
                memory.SampleMultiMasterDataTable,
                table
            
            );
        }


    }
}